Microsoft (R) Macro Assembler Version 14.38.33134.0	    02/01/24 13:34:29
hw2.asm							     Page 1 - 1


				; hw2.asm
				; Author: Sunil Jain
				; Course/ Project ID: CS271 -Homework 2
				; Date: 
				; Description: 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				.386
				.model flat,stdcall
hw2.asm(10) : warning A4011:multiple .MODEL directives found : .MODEL ignored
				.stack 4096
				ExitProcess proto, dwExitCode : dword

				; insert constant definitions here

 = 00000050			     MAX_STR             = 80           ; maximum chars to read to name
 = 00000001			     MIN_BOUND           = 1            ; minimum boundary
 = 000003E8			     MAX_BOUND           = 1000         ; maximum boundary

 00000000			.data

				; insert variable definitions here

 00000000 0A 0D 43 53 20		intro_msg           Byte      0ah, 0Dh, "CS 271 HW 2 - Factors", 0
	   32 37 31 20 48
	   57 20 32 20 2D
	   20 46 61 63 74
	   6F 72 73 00
 00000018 0A 0D 20 20 20	     desc_msg            Byte      0ah, 0Dh, "    This program calculates and displays the factors of numbers from lowerbound to upper bound.", 0ah, 0Dh, "    It also indicates when a number is prime", 0
	   20 54 68 69 73
	   20 70 72 6F 67
	   72 61 6D 20 63
	   61 6C 63 75 6C
	   61 74 65 73 20
	   61 6E 64 20 64
	   69 73 70 6C 61
	   79 73 20 74 68
	   65 20 66 61 63
	   74 6F 72 73 20
	   6F 66 20 6E 75
	   6D 62 65 72 73
	   20 66 72 6F 6D
	   20 6C 6F 77 65
	   72 62 6F 75 6E
	   64 20 74 6F 20
	   75 70 70 65 72
	   20 62 6F 75 6E
	   64 2E 0A 0D 20
	   20 20 20 49 74
	   20 61 6C 73 6F
	   20 69 6E 64 69
	   63 61 74 65 73
	   20 77 68 65 6E
	   20 61 20 6E 75
	   6D 62 65 72 20
	   69 73 20 70 72
	   69 6D 65 00
 000000A8 0A 0D 0A 0D 45	     name_request        Byte      0ah, 0Dh, 0ah, 0Dh, "Enter your name: ", 0
	   6E 74 65 72 20
	   79 6F 75 72 20
	   6E 61 6D 65 3A
	   20 00

 000000BE 0A 0D 45 6E 74	     lower_b_request     Byte      0ah, 0Dh, "Enter a number between 1 and 1000 for the lowerbound of the range : ", 0
	   65 72 20 61 20
	   6E 75 6D 62 65
	   72 20 62 65 74
	   77 65 65 6E 20
	   31 20 61 6E 64
	   20 31 30 30 30
	   20 66 6F 72 20
	   74 68 65 20 6C
	   6F 77 65 72 62
	   6F 75 6E 64 20
	   6F 66 20 74 68
	   65 20 72 61 6E
	   67 65 20 3A 20
	   00
 00000105 45 6E 74 65 72	     upper_b_request     Byte      "Enter a number between 1 and 1000 for the upperbound of the range : ", 0
	   20 61 20 6E 75
	   6D 62 65 72 20
	   62 65 74 77 65
	   65 6E 20 31 20
	   61 6E 64 20 31
	   30 30 30 20 66
	   6F 72 20 74 68
	   65 20 75 70 70
	   65 72 62 6F 75
	   6E 64 20 6F 66
	   20 74 68 65 20
	   72 61 6E 67 65
	   20 3A 20 00
 0000014A 0A 0D 57 6F 75	     repeat_request      Byte      0ah, 0Dh, "Would you like to do another calculation? (0=NO, 1=YES): ", 0
	   6C 64 20 79 6F
	   75 20 6C 69 6B
	   65 20 74 6F 20
	   64 6F 20 61 6E
	   6F 74 68 65 72
	   20 63 61 6C 63
	   75 6C 61 74 69
	   6F 6E 3F 20 28
	   30 3D 4E 4F 2C
	   20 31 3D 59 45
	   53 29 3A 20 00

 00000186 0A 0D 54 68 65	     lower_b_error       Byte      0ah, 0Dh, "The number you entered is too small (1-1000).", 0
	   20 6E 75 6D 62
	   65 72 20 79 6F
	   75 20 65 6E 74
	   65 72 65 64 20
	   69 73 20 74 6F
	   6F 20 73 6D 61
	   6C 6C 20 28 31
	   2D 31 30 30 30
	   29 2E 00
 000001B6 0A 0D 54 68 65	     upper_b_error       Byte      0ah, 0Dh, "The number you entered is too big (1-1000).", 0
	   20 6E 75 6D 62
	   65 72 20 79 6F
	   75 20 65 6E 74
	   65 72 65 64 20
	   69 73 20 74 6F
	   6F 20 62 69 67
	   20 28 31 2D 31
	   30 30 30 29 2E
	   00
 000001E4 0A 0D 54 68 65	     improper_b_error    Byte      0ah, 0Dh, "The lowerbound must be >= the lowerbound", 0
	   20 6C 6F 77 65
	   72 62 6F 75 6E
	   64 20 6D 75 73
	   74 20 62 65 20
	   3E 3D 20 74 68
	   65 20 6C 6F 77
	   65 72 62 6F 75
	   6E 64 00

 0000020F 20 20 2A 2A 20	     prime_msg           Byte      "  ** Prime Number **", 0
	   50 72 69 6D 65
	   20 4E 75 6D 62
	   65 72 20 2A 2A
	   00
 00000224 0A 0D 47 6F 6F	     bye_msg             Byte      0ah, 0Dh, "Good bye ", 0
	   64 20 62 79 65
	   20 00
				     
 00000230 20 3A 20 00		     colon               Byte      " : ", 0
 00000234 0A 0D 00		     newline             Byte      0ah, 0Dh, 0


 00000237  00000051 [		     name_input          Byte      MAX_STR+1 DUP(?)
	    00
	   ]
 00000288  00000051 [		     lower_b_input       DWORD     MAX_STR+1 DUP(?)
	    00000000
	   ]
 000003CC  00000051 [		     upper_b_input       DWORD     MAX_STR+1 DUP(?)
	    00000000
	   ]

 00000510  00000051 [		     index               DWORD     MAX_STR+1 DUP(?)
	    00000000
	   ]
 00000654 00000000		     is_prime            DWORD     0

 00000000			.code
 00000000			main proc

				; insert executable instructions here


				;-------------------------------------------------------------------------------------------
				;    Prints the introduction and description messages, prompts for the user's name
 00000000  BA 00000000 R		mov edx, OFFSET intro_msg
 00000005  E8 00000000 E		Call WriteString
 0000000A  BA 00000018 R	     mov edx, OFFSET desc_msg
 0000000F  E8 00000000 E		Call WriteString

 00000014  BA 000000A8 R	     mov		edx, OFFSET name_request
 00000019  E8 00000000 E		Call      WriteString

 0000001E  BA 00000237 R	     mov       edx, OFFSET name_input
 00000023  B9 00000050		     mov       ecx, MAX_STR ; amount of characters to read in
 00000028  E8 00000000 E	     Call      ReadString

				;-------------------------------------------------------------------------------------------
				;    prompts for the lower bound and stores it, then checks if it is within 1-1000

 0000002D			get_lower_b:
 0000002D  BA 000000BE R	     mov		edx, OFFSET lower_b_request
 00000032  E8 00000000 E		Call      WriteString

 00000037  E8 00000000 E	     Call      ReadInt
 0000003C  A3 00000288 R	     mov       lower_b_input, eax

 00000041  EB 3A		     jmp       check_lower_b

				;-------------------------------------------------------------------------------------------
				;    prompts for the upper bound and stores it, then checks if it is within 1-1000

 00000043			get_upper_b:
 00000043  BA 00000105 R	     mov		edx, OFFSET upper_b_request
 00000048  E8 00000000 E		Call      WriteString

 0000004D  E8 00000000 E	     Call      ReadInt
 00000052  A3 000003CC R	     mov       upper_b_input, eax

 00000057  EB 37		     jmp       check_upper_b


				;-------------------------------------------------------------------------------------------
				;    if the lower bound is not within 1-1000 print an error message and reprompt

 00000059			print_lower_b_error:
 00000059  BA 00000186 R	     mov		edx, OFFSET lower_b_error
 0000005E  E8 00000000 E		Call      WriteString
 00000063  EB C8		     jmp       get_lower_b


				;-------------------------------------------------------------------------------------------
				;    if the upper bound is not within 1-1000 print an error message and reprompt

 00000065			print_upper_b_error:
 00000065  BA 000001B6 R	     mov		edx, OFFSET upper_b_error
 0000006A  E8 00000000 E		Call      WriteString
 0000006F  EB BC		     jmp       get_lower_b

				;-------------------------------------------------------------------------------------------
				;    if the lowerbound is higher than the upperbound print an error and reprompt

 00000071			print_improper_b_error:
 00000071  BA 000001E4 R	     mov		edx, OFFSET improper_b_error
 00000076  E8 00000000 E		Call      WriteString
 0000007B  EB B0		     jmp       get_lower_b


				;-------------------------------------------------------------------------------------------
				;    checks if the lowerbound is within 1-1000 if it isnt reprompt, if it is get upperbound

 0000007D			check_lower_b:
 0000007D  A1 00000288 R	     mov       eax, lower_b_input

 00000082  3D 000003E8		     cmp       eax, MAX_BOUND
 00000087  7F DC		     jg        print_upper_b_error

 00000089  83 F8 01		     cmp       eax, MIN_BOUND
 0000008C  7C CB		     jl        print_lower_b_error

 0000008E  EB B3		     jmp       get_upper_b
				     
				;-------------------------------------------------------------------------------------------
				; check if the upperbound is within 1-1000 if it isnt reprompt, if it is, check if the upperbound is higher than the lower

 00000090			check_upper_b:
 00000090  A1 000003CC R	     mov       eax, upper_b_input

 00000095  3D 000003E8		     cmp       eax, MAX_BOUND
 0000009A  7F C9		     jg        print_upper_b_error

 0000009C  83 F8 01		     cmp       eax, MIN_BOUND
 0000009F  7C B8		     jl        print_lower_b_error
 000000A1  EB 00		     jmp       check_improper_b

				;-------------------------------------------------------------------------------------------
				; check if the upperbound is higher than the lowerbound, if it isnt then reprompt, if it is then continue from here

 000000A3			check_improper_b:
 000000A3  A1 00000288 R	     mov       eax, lower_b_input

 000000A8  3B 05 000003CC R	     cmp       eax, upper_b_input
 000000AE  7F C1		     jg        print_improper_b_error


				;-------------------------------------------------------------------------------------------
				; sets up the outer loop using the conditions: for (int i = lower; i <= upper; i++)
				     
 000000B0  BA 00000234 R	     mov edx, OFFSET newline
 000000B5  E8 00000000 E		Call WriteString
 000000BA  A1 00000288 R	     mov       eax, lower_b_input
 000000BF  A3 00000510 R	     mov       index, eax
 000000C4  8B 0D 00000510 R	     mov       ecx, index

 000000CA			index_loop:
				     
 000000CA  89 0D 00000510 R	     mov       index, ecx               ; saves the ecx in index so we can use ecx for the innerloop

 000000D0  A1 00000510 R	     mov       eax, index               ; print out the number we are checking for prime number
 000000D5  E8 00000000 E	     Call      WriteInt

 000000DA  BA 00000230 R	     mov		edx, OFFSET colon        ; print out the colon to make it look nice
 000000DF  E8 00000000 E		Call      WriteString
				     
 000000E4  8B 1D 000003CC R	     mov       ebx, upper_b_input       ; use ebx for a cmp with index for the loop conditions

				;-------------------------------------------------------------------------------------------
				; sets up the inner loop using ecx: for (int j = 1; j < index; j++)

 000000EA  B9 00000001		     mov       ecx, 1
 000000EF  C7 05 00000654 R	     mov       is_prime, 0              ; if this is 2 at the end of the inner loop, the number is a prime number
	   00000000

 000000F9			primes_loop:

 000000F9  A1 00000510 R	     mov       eax, index               ; divide index by the inner loop's counter (1-index)
 000000FE  99			     cdq
 000000FF  F7 F1		     div       ecx

 00000101  83 FA 00		     cmp       edx, 0                   ; if the remainder is 0 then print the divisible number 
 00000104  74 0B		     je        print_div

 00000106  41			     inc       ecx                      ; if it isnt 0, then increment the counter, and start the inner loop again
 00000107  3B 0D 00000510 R	     cmp       ecx, index
 0000010D  7E EA		     jle       primes_loop
 0000010F  EB 18		     jmp       check_index_loop         ; if the loop Is done jump to the end of the inner loop

				;-------------------------------------------------------------------------------------------
				; print the ecx counter if it is divisible by index (incrementing using the outer loop)

 00000111			print_div:
 00000111  8B C1		     mov       eax, ecx
 00000113  E8 00000000 E	     Call      WriteInt

 00000118  FF 05 00000654 R	     inc       is_prime                 ; increment this to count the amount of divisible numbers

 0000011E  41			     inc       ecx                      ; start the inner loop again
 0000011F  3B 0D 00000510 R	     cmp       ecx, index
 00000125  7E D2		     jle       primes_loop
 00000127  EB 00		     jmp       check_index_loop         ; if the loop Is done, jump to the end of the inner loop


				;-------------------------------------------------------------------------------------------
				; the end of the inner loop where we finally check if index is a prime number by counting the number of divisible numbers

 00000129			check_index_loop:
				     
 00000129  8B 0D 00000654 R	     mov       ecx, is_prime            ; if 2 divisible numbers, it is prime
 0000012F  83 F9 02		     cmp       ecx, 2
 00000132  74 1F		     je        print_prime_num

 00000134			after_print_prime_num:                  ; a marker to jump to after saying this number is prime
				     
 00000134  BA 00000234 R	     mov		edx, OFFSET newline      ; set up for the new outer loop
 00000139  E8 00000000 E		Call      WriteString


 0000013E  8B 0D 00000510 R	     mov       ecx, index               ; move index back into ecx to use as a counter for the outer loop
 00000144  41			     inc       ecx
				     
 00000145  3B 0D 000003CC R	     cmp       ecx, upper_b_input       ; for (int i = lower; i <= upper; i++)
 0000014B  0F 8E FFFFFF79	     jle       index_loop               ; continue the loop if less than or equal to 
 00000151  EB 0C		     jmp       after_index_loop         ; break the loop

				;-------------------------------------------------------------------------------------------
				; notify the user that the current number is a prime

 00000153			print_prime_num:
 00000153  BA 0000020F R	     mov       edx, OFFSET prime_msg 
 00000158  E8 00000000 E	     Call      WriteString
 0000015D  EB D5		     jmp       after_print_prime_num

				;-------------------------------------------------------------------------------------------
				; after both loops are done, prompt if the user wants to calculate again (1-yes, 0-no)

 0000015F			after_index_loop:
 0000015F  BA 0000014A R	     mov       edx, OFFSET repeat_request
 00000164  E8 00000000 E	     Call      WriteString
 00000169  E8 00000000 E	     Call      ReadInt
				     
 0000016E  83 F8 01		     cmp       eax, 1
 00000171  0F 84 FFFFFEB6	     je        get_lower_b
				     
 00000177  BA 00000224 R	     mov       edx, OFFSET bye_msg      ; print good bye
 0000017C  E8 00000000 E	     Call      WriteString
 00000181  BA 00000237 R	     mov       edx, OFFSET name_input   ; print the user name
 00000186  E8 00000000 E	     Call      WriteString

				;-------------------------------------------------------------------------------------------
				; Done!

					invoke ExitProcess,0
 0000018B  6A 00	   *	    push   +000000000h
 0000018D  E8 00000000 E   *	    call   ExitProcess
 00000192			main endp

				; insert additional procedures here

				End main
Microsoft (R) Macro Assembler Version 14.38.33134.0	    02/01/24 13:34:29
hw2.asm							     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000658 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000192 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000192 Public STDCALL
  get_lower_b  . . . . . . . . .	L Near	 0000002D _TEXT	
  get_upper_b  . . . . . . . . .	L Near	 00000043 _TEXT	
  print_lower_b_error  . . . . .	L Near	 00000059 _TEXT	
  print_upper_b_error  . . . . .	L Near	 00000065 _TEXT	
  print_improper_b_error . . . .	L Near	 00000071 _TEXT	
  check_lower_b  . . . . . . . .	L Near	 0000007D _TEXT	
  check_upper_b  . . . . . . . .	L Near	 00000090 _TEXT	
  check_improper_b . . . . . . .	L Near	 000000A3 _TEXT	
  index_loop . . . . . . . . . .	L Near	 000000CA _TEXT	
  primes_loop  . . . . . . . . .	L Near	 000000F9 _TEXT	
  print_div  . . . . . . . . . .	L Near	 00000111 _TEXT	
  check_index_loop . . . . . . .	L Near	 00000129 _TEXT	
  after_print_prime_num  . . . .	L Near	 00000134 _TEXT	
  print_prime_num  . . . . . . .	L Near	 00000153 _TEXT	
  after_index_loop . . . . . . .	L Near	 0000015F _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAX_BOUND  . . . . . . . . . . .	Number	 000003E8h   
MAX_STR  . . . . . . . . . . . .	Number	 00000050h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MIN_BOUND  . . . . . . . . . . .	Number	 00000001h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bye_msg  . . . . . . . . . . . .	Byte	 00000224 _DATA	
colon  . . . . . . . . . . . . .	Byte	 00000230 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
desc_msg . . . . . . . . . . . .	Byte	 00000018 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
improper_b_error . . . . . . . .	Byte	 000001E4 _DATA	
index  . . . . . . . . . . . . .	DWord	 00000510 _DATA	
intro_msg  . . . . . . . . . . .	Byte	 00000000 _DATA	
is_prime . . . . . . . . . . . .	DWord	 00000654 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lower_b_error  . . . . . . . . .	Byte	 00000186 _DATA	
lower_b_input  . . . . . . . . .	DWord	 00000288 _DATA	
lower_b_request  . . . . . . . .	Byte	 000000BE _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
name_input . . . . . . . . . . .	Byte	 00000237 _DATA	
name_request . . . . . . . . . .	Byte	 000000A8 _DATA	
newline  . . . . . . . . . . . .	Byte	 00000234 _DATA	
prime_msg  . . . . . . . . . . .	Byte	 0000020F _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
repeat_request . . . . . . . . .	Byte	 0000014A _DATA	
upper_b_error  . . . . . . . . .	Byte	 000001B6 _DATA	
upper_b_input  . . . . . . . . .	DWord	 000003CC _DATA	
upper_b_request  . . . . . . . .	Byte	 00000105 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
